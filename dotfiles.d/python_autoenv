# Python Autoenv 
#
# Env manager with alien steroids to work with *git project ONLY* and load
# venv folder or virtualenvwrapper automagically but don't mess with 
# cd redefinitions. 
#
# Hooks nicely in PROMPT_COMMAND in bash or precmd in zsh. 
#
# You can source directly to initialize but requires the git_cwd function from:
# https://github.com/iknite/dotfiles/blob/master/.dotfiles.d/03_functions
#
#
# Rules:
#    If the git root has a .virtualenv file use the content as environment var.
#    Otherwise use the root foldername. 
#
#    If the environment is a virtualenvwrapper folder load it, else source it 
#    apennding /bin/activate. It can be relative to the git root (prepending it)
#    or fullpath (beginning with a forward slash).
#
#    Ignore all the abobe with a .hush_python_autoenv file in the $HOME path. 
#    Next open terminal will not hook it, but it can be launched manually
#    anyway with python_autoenv.


if ! declare -f workon 2> /dev/null &&
   [ -f '/usr/bin/virtualenvwrapper.sh' ]
then
    source '/usr/bin/virtualenvwrapper.sh'
fi

python_autoenv(){
    local cwd=$(git_cwd)

    [ -d "$cwd/venv/bin" ] && source $cwd/venv/bin/activate && return

    if [ ! -z $cwd ]; then
        local env=$((cat "$cwd/.virtualenv" || basename $cwd) 2> /dev/null)

        if echo $(which python) | egrep -q "(.*/|)$env/bin/python"; then 
            return; fi

        [ -d "$WORKON_HOME/$env" ] && workon $env 2> /dev/null && return
        if [[ -n $BASH ]] && [ "${env::1}" != "/" ] ||
            [[ -n $ZSH_VERSION ]] && [ "$env[1]" != "/" ]
        then
            env=$cwd/$env
        fi
        [ -f "$env/bin/activate" ] && source $env/bin/activate && return
    fi
    
    declare -f deactivate > /dev/null && deactivate
}

[ -f "$HOME/.hush_python_autoenv" ] && return  

[[ -n $BASH ]] && 
    PROMPT_COMMAND='python_autoenv; '$PROMPT_COMMAND

[[ -n $ZSH_VERSION ]] && 
    autoload -Uz add-zsh-hook &&
    add-zsh-hook precmd python_autoenv
